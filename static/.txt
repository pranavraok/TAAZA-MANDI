<!DOCTYPE html>
<html lang="en">
<head>
Â  <meta charset="UTF-8">
Â  <meta name="viewport" content="width=device-width, initial-scale=1.0">
Â  <title>TAAZA MANDI - Login</title>
Â  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
Â  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
Â  <script src="https://unpkg.com/@supabase/supabase-js"></script>
Â  <style>
Â  Â  :root {
Â  Â  Â  --primary-green: #2d5f3f;
Â  Â  Â  --secondary-green: #4a8f5f;
Â  Â  Â  --accent-green: #6bb77b;
Â  Â  Â  --light-green: #e8f5e8;
Â  Â  Â  --ultra-light-green: #f4fbf4;
Â  Â  Â  --background: linear-gradient(135deg, #f8fbf8 0%, #f0f8f0 100%);
Â  Â  Â  --card-bg: #ffffff;
Â  Â  Â  --text-primary: #1a1a1a;
Â  Â  Â  --text-secondary: #4a5568;
Â  Â  Â  --text-light: #718096;
Â  Â  Â  --border-light: #e2e8f0;
Â  Â  Â  --shadow-sm: 0 2px 4px rgba(0,0,0,0.04);
Â  Â  Â  --shadow-md: 0 4px 12px rgba(0,0,0,0.08);
Â  Â  Â  --shadow-lg: 0 8px 24px rgba(0,0,0,0.12);
Â  Â  Â  --shadow-xl: 0 12px 32px rgba(0,0,0,0.16);
Â  Â  Â  --radius-sm: 8px;
Â  Â  Â  --radius-md: 12px;
Â  Â  Â  --radius-lg: 16px;
Â  Â  Â  --radius-xl: 20px;
Â  Â  Â  --success: #48bb78;
Â  Â  Â  --warning: #ed8936;
Â  Â  Â  --error: #f56565;
Â  Â  }


Â  Â  * {
Â  Â  Â  margin: 0;
Â  Â  Â  padding: 0;
Â  Â  Â  box-sizing: border-box;
Â  Â  }


Â  Â  body {
Â  Â  Â  background: var(--background);
Â  Â  Â  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
Â  Â  Â  color: var(--text-primary);
Â  Â  Â  line-height: 1.6;
Â  Â  Â  min-height: 100vh;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  justify-content: center;
Â  Â  Â  padding: 1rem;
Â  Â  }


Â  Â  .auth-container {
Â  Â  Â  display: grid;
Â  Â  Â  grid-template-columns: 1fr 1fr;
Â  Â  Â  width: 100%;
Â  Â  Â  max-width: 1200px;
Â  Â  Â  min-height: 700px;
Â  Â  Â  background: var(--card-bg);
Â  Â  Â  border-radius: var(--radius-xl);
Â  Â  Â  box-shadow: var(--shadow-xl);
Â  Â  Â  overflow: hidden;
Â  Â  Â  position: relative;
Â  Â  }


Â  Â  .auth-container::before {
Â  Â  Â  content: '';
Â  Â  Â  position: absolute;
Â  Â  Â  top: 0;
Â  Â  Â  left: 0;
Â  Â  Â  right: 0;
Â  Â  Â  height: 4px;
Â  Â  Â  background: linear-gradient(90deg, var(--primary-green), var(--secondary-green), var(--accent-green));
Â  Â  }


Â  Â  /* Left Side - Image */
Â  Â  .auth-left {
Â  Â  Â  background: linear-gradient(135deg, var(--primary-green) 0%, var(--secondary-green) 100%);
Â  Â  Â  display: flex;
Â  Â  Â  flex-direction: column;
Â  Â  Â  align-items: center;
Â  Â  Â  justify-content: center;
Â  Â  Â  padding: 3rem 2rem;
Â  Â  Â  position: relative;
Â  Â  Â  overflow: hidden;
Â  Â  }


Â  Â  .auth-left::before {
Â  Â  Â  content: '';
Â  Â  Â  position: absolute;
Â  Â  Â  top: 0;
Â  Â  Â  left: 0;
Â  Â  Â  right: 0;
Â  Â  Â  bottom: 0;
Â  Â  Â  background-image: 
Â  Â  Â  Â  url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
Â  Â  Â  opacity: 0.1;
Â  Â  }


Â  Â  .auth-left-content {
Â  Â  Â  text-align: center;
Â  Â  Â  color: white;
Â  Â  Â  position: relative;
Â  Â  Â  z-index: 1;
Â  Â  }


Â  Â  .auth-left h2 {
Â  Â  Â  font-size: 3rem;
Â  Â  Â  font-weight: 800;
Â  Â  Â  margin-bottom: 1rem;
Â  Â  Â  background: linear-gradient(135deg, white, rgba(255,255,255,0.8));
Â  Â  Â  -webkit-background-clip: text;
Â  Â  Â  -webkit-text-fill-color: transparent;
Â  Â  Â  background-clip: text;
Â  Â  }


Â  Â  .auth-left p {
Â  Â  Â  font-size: 1.2rem;
Â  Â  Â  color: rgba(255,255,255,0.9);
Â  Â  Â  margin-bottom: 2rem;
Â  Â  Â  max-width: 400px;
Â  Â  }


Â  Â  .auth-left-icon {
Â  Â  Â  font-size: 8rem;
Â  Â  Â  color: rgba(255,255,255,0.2);
Â  Â  Â  margin-bottom: 2rem;
Â  Â  Â  animation: float 3s ease-in-out infinite;
Â  Â  }


Â  Â  @keyframes float {
Â  Â  Â  0%, 100% { transform: translateY(0px); }
Â  Â  Â  50% { transform: translateY(-20px); }
Â  Â  }


Â  Â  /* Right Side - Form */
Â  Â  .auth-right {
Â  Â  Â  padding: 3rem 2rem;
Â  Â  Â  display: flex;
Â  Â  Â  flex-direction: column;
Â  Â  Â  justify-content: center;
Â  Â  Â  position: relative;
Â  Â  }


Â  Â  .brand {
Â  Â  Â  text-align: center;
Â  Â  Â  margin-bottom: 2rem;
Â  Â  }


Â  Â  .brand h2 {
Â  Â  Â  font-size: 2rem;
Â  Â  Â  font-weight: 800;
Â  Â  Â  background: linear-gradient(135deg, var(--primary-green), var(--secondary-green));
Â  Â  Â  -webkit-background-clip: text;
Â  Â  Â  -webkit-text-fill-color: transparent;
Â  Â  Â  background-clip: text;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  justify-content: center;
Â  Â  Â  gap: 0.75rem;
Â  Â  }


Â  Â  .form-header {
Â  Â  Â  text-align: center;
Â  Â  Â  margin-bottom: 2rem;
Â  Â  }


Â  Â  .form-header h3 {
Â  Â  Â  font-size: 2rem;
Â  Â  Â  font-weight: 700;
Â  Â  Â  color: var(--text-primary);
Â  Â  Â  margin-bottom: 0.5rem;
Â  Â  }


Â  Â  .form-header p {
Â  Â  Â  color: var(--text-secondary);
Â  Â  Â  font-size: 1rem;
Â  Â  }


Â  Â  /* Form Styles */
Â  Â  .auth-form {
Â  Â  Â  display: flex;
Â  Â  Â  flex-direction: column;
Â  Â  Â  gap: 1.5rem;
Â  Â  }


Â  Â  .form-group {
Â  Â  Â  display: flex;
Â  Â  Â  flex-direction: column;
Â  Â  }


Â  Â  .auth-form label {
Â  Â  Â  font-weight: 600;
Â  Â  Â  color: var(--text-primary);
Â  Â  Â  margin-bottom: 0.5rem;
Â  Â  Â  font-size: 0.95rem;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  gap: 0.5rem;
Â  Â  }


Â  Â  .input-wrapper {
Â  Â  Â  position: relative;
Â  Â  }


Â  Â  .auth-form input {
Â  Â  Â  width: 100%;
Â  Â  Â  padding: 1rem 1rem 1rem 3rem;
Â  Â  Â  border: 2px solid var(--border-light);
Â  Â  Â  border-radius: var(--radius-md);
Â  Â  Â  font-size: 1rem;
Â  Â  Â  background: var(--ultra-light-green);
Â  Â  Â  transition: all 0.3s ease;
Â  Â  Â  font-family: inherit;
Â  Â  }


Â  Â  .auth-form input:focus {
Â  Â  Â  outline: none;
Â  Â  Â  border-color: var(--secondary-green);
Â  Â  Â  background: white;
Â  Â  Â  box-shadow: 0 0 0 3px rgba(106, 183, 123, 0.1);
Â  Â  }


Â  Â  .input-icon {
Â  Â  Â  position: absolute;
Â  Â  Â  left: 1rem;
Â  Â  Â  top: 50%;
Â  Â  Â  transform: translateY(-50%);
Â  Â  Â  color: var(--text-light);
Â  Â  Â  font-size: 1rem;
Â  Â  }


Â  Â  .password-wrapper {
Â  Â  Â  display: flex;
Â  Â  Â  justify-content: space-between;
Â  Â  Â  align-items: center;
Â  Â  Â  margin-top: 0.5rem;
Â  Â  }


Â  Â  .forgot-link {
Â  Â  Â  color: var(--secondary-green);
Â  Â  Â  text-decoration: none;
Â  Â  Â  font-size: 0.9rem;
Â  Â  Â  font-weight: 500;
Â  Â  Â  transition: all 0.3s ease;
Â  Â  }


Â  Â  .forgot-link:hover {
Â  Â  Â  color: var(--primary-green);
Â  Â  Â  transform: translateX(2px);
Â  Â  }


Â  Â  .remember-wrapper {
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  gap: 0.75rem;
Â  Â  Â  margin: 0.5rem 0;
Â  Â  }


Â  Â  .remember-wrapper input[type="checkbox"] {
Â  Â  Â  width: 18px;
Â  Â  Â  height: 18px;
Â  Â  Â  accent-color: var(--secondary-green);
Â  Â  }


Â  Â  .remember-wrapper label {
Â  Â  Â  color: var(--text-secondary);
Â  Â  Â  font-weight: 500;
Â  Â  Â  cursor: pointer;
Â  Â  Â  margin-bottom: 0;
Â  Â  }


Â  Â  .btn-primary {
Â  Â  Â  background: linear-gradient(135deg, var(--primary-green), var(--secondary-green));
Â  Â  Â  color: white;
Â  Â  Â  border: none;
Â  Â  Â  padding: 1rem 2rem;
Â  Â  Â  border-radius: var(--radius-md);
Â  Â  Â  font-weight: 700;
Â  Â  Â  font-size: 1rem;
Â  Â  Â  cursor: pointer;
Â  Â  Â  transition: all 0.3s ease;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  justify-content: center;
Â  Â  Â  gap: 0.5rem;
Â  Â  Â  box-shadow: var(--shadow-md);
Â  Â  Â  margin-top: 1rem;
Â  Â  }


Â  Â  .btn-primary:hover {
Â  Â  Â  transform: translateY(-2px);
Â  Â  Â  box-shadow: var(--shadow-xl);
Â  Â  }


Â  Â  .btn-primary:disabled {
Â  Â  Â  opacity: 0.7;
Â  Â  Â  cursor: not-allowed;
Â  Â  Â  transform: none;
Â  Â  }


Â  Â  .switch-form {
Â  Â  Â  text-align: center;
Â  Â  Â  margin-top: 1.5rem;
Â  Â  Â  padding-top: 1.5rem;
Â  Â  Â  border-top: 1px solid var(--border-light);
Â  Â  }


Â  Â  .switch-form p {
Â  Â  Â  color: var(--text-secondary);
Â  Â  Â  margin-bottom: 1rem;
Â  Â  }


Â  Â  .switch-form a {
Â  Â  Â  color: var(--secondary-green);
Â  Â  Â  text-decoration: none;
Â  Â  Â  font-weight: 600;
Â  Â  Â  transition: all 0.3s ease;
Â  Â  }


Â  Â  .switch-form a:hover {
Â  Â  Â  color: var(--primary-green);
Â  Â  }


Â  Â  /* Error Messages */
Â  Â  .error-message {
Â  Â  Â  color: var(--error);
Â  Â  Â  font-size: 0.85rem;
Â  Â  Â  margin-top: 0.25rem;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  gap: 0.375rem;
Â  Â  }


Â  Â  /* Success/Info Messages */
Â  Â  .message {
Â  Â  Â  padding: 1rem;
Â  Â  Â  border-radius: var(--radius-md);
Â  Â  Â  margin-bottom: 1.5rem;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  gap: 0.75rem;
Â  Â  Â  font-weight: 500;
Â  Â  }


Â  Â  .message.success {
Â  Â  Â  background: rgba(72, 187, 120, 0.1);
Â  Â  Â  color: var(--success);
Â  Â  Â  border: 1px solid rgba(72, 187, 120, 0.2);
Â  Â  }


Â  Â  .message.error {
Â  Â  Â  background: rgba(245, 101, 101, 0.1);
Â  Â  Â  color: var(--error);
Â  Â  Â  border: 1px solid rgba(245, 101, 101, 0.2);
Â  Â  }


Â  Â  .message.info {
Â  Â  Â  background: rgba(66, 153, 225, 0.1);
Â  Â  Â  color: #4299e1;
Â  Â  Â  border: 1px solid rgba(66, 153, 225, 0.2);
Â  Â  }


Â  Â  /* Footer Links */
Â  Â  .footer-links {
Â  Â  Â  text-align: center;
Â  Â  Â  margin-top: 2rem;
Â  Â  Â  padding-top: 1.5rem;
Â  Â  Â  border-top: 1px solid var(--border-light);
Â  Â  }


Â  Â  .footer-links a {
Â  Â  Â  color: var(--text-secondary);
Â  Â  Â  text-decoration: none;
Â  Â  Â  font-weight: 500;
Â  Â  Â  display: inline-flex;
Â  Â  Â  align-items: center;
Â  Â  Â  gap: 0.5rem;
Â  Â  Â  transition: all 0.3s ease;
Â  Â  }


Â  Â  .footer-links a:hover {
Â  Â  Â  color: var(--secondary-green);
Â  Â  Â  transform: translateX(-2px);
Â  Â  }


Â  Â  /* Loading Animation */
Â  Â  .loading {
Â  Â  Â  display: inline-block;
Â  Â  Â  width: 20px;
Â  Â  Â  height: 20px;
Â  Â  Â  border: 3px solid rgba(255,255,255,0.3);
Â  Â  Â  border-radius: 50%;
Â  Â  Â  border-top-color: white;
Â  Â  Â  animation: spin 1s ease-in-out infinite;
Â  Â  }


Â  Â  @keyframes spin {
Â  Â  Â  to { transform: rotate(360deg); }
Â  Â  }


Â  Â  /* Hidden State */
Â  Â  .hidden {
Â  Â  Â  display: none;
Â  Â  }


Â  Â  /* Responsive Design */
Â  Â  @media (max-width: 1024px) {
Â  Â  Â  .auth-container {
Â  Â  Â  Â  grid-template-columns: 1fr;
Â  Â  Â  Â  max-width: 500px;
Â  Â  Â  }


Â  Â  Â  .auth-left {
Â  Â  Â  Â  display: none;
Â  Â  Â  }


Â  Â  Â  .auth-right {
Â  Â  Â  Â  padding: 2rem 1.5rem;
Â  Â  Â  }
Â  Â  }


Â  Â  @media (max-width: 768px) {
Â  Â  Â  body {
Â  Â  Â  Â  padding: 0.5rem;
Â  Â  Â  }


Â  Â  Â  .auth-container {
Â  Â  Â  Â  min-height: auto;
Â  Â  Â  }


Â  Â  Â  .auth-right {
Â  Â  Â  Â  padding: 1.5rem 1rem;
Â  Â  Â  }


Â  Â  Â  .form-header h3 {
Â  Â  Â  Â  font-size: 1.75rem;
Â  Â  Â  }


Â  Â  Â  .auth-left h2 {
Â  Â  Â  Â  font-size: 2.5rem;
Â  Â  Â  }
Â  Â  }


Â  Â  /* Focus States */
Â  Â  *:focus {
Â  Â  Â  outline: 2px solid var(--secondary-green);
Â  Â  Â  outline-offset: 2px;
Â  Â  }
Â  </style>
</head>
<body>
Â  <div class="auth-container">
Â  Â  <!-- Left Side - Welcome -->
Â  Â  <div class="auth-left">
Â  Â  Â  <div class="auth-left-content">
Â  Â  Â  Â  <div class="auth-left-icon">
Â  Â  Â  Â  Â  <i class="fas fa-seedling"></i>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <h2>Welcome Back!</h2>
Â  Â  Â  Â  <p>Access your farmer dashboard and connect with buyers from across India. Your fresh produce awaits!</p>
Â  Â  Â  </div>
Â  Â  </div>


Â  Â  <!-- Right Side - Login Form -->
Â  Â  <div class="auth-right">
Â  Â  Â  <div class="brand">
Â  Â  Â  Â  <h2>
Â  Â  Â  Â  Â  <i class="fas fa-seedling"></i>
Â  Â  Â  Â  Â  TAAZA MANDI
Â  Â  Â  Â  </h2>
Â  Â  Â  </div>


Â  Â  Â  <div class="form-header">
Â  Â  Â  Â  <h3>Sign In</h3>
Â  Â  Â  Â  <p>Enter your credentials to access your account</p>
Â  Â  Â  </div>


Â  Â  Â  <div id="message" class="message hidden">
Â  Â  Â  Â  <i class="fas fa-info-circle"></i>
Â  Â  Â  Â  <span id="message-text"></span>
Â  Â  Â  </div>


Â  Â  Â  <!-- Login Form with Flask action -->
Â  Â  Â  <form id="login-form" class="auth-form" method="POST" action="{{ url_for('login') }}">
Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  <label for="email">
Â  Â  Â  Â  Â  Â  <i class="fas fa-envelope"></i>
Â  Â  Â  Â  Â  Â  Email Address
Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  <div class="input-wrapper">
Â  Â  Â  Â  Â  Â  <i class="fas fa-envelope input-icon"></i>
Â  Â  Â  Â  Â  Â  <input type="email" id="email" name="email" placeholder="Enter your email address" required>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div id="email-error" class="error-message hidden">
Â  Â  Â  Â  Â  Â  <i class="fas fa-exclamation-circle"></i>
Â  Â  Â  Â  Â  Â  <span></span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>


Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  <label for="password">
Â  Â  Â  Â  Â  Â  <i class="fas fa-lock"></i>
Â  Â  Â  Â  Â  Â  Password
Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  <div class="input-wrapper">
Â  Â  Â  Â  Â  Â  <i class="fas fa-lock input-icon"></i>
Â  Â  Â  Â  Â  Â  <input type="password" id="password" name="password" placeholder="Enter your password" required>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div class="password-wrapper">
Â  Â  Â  Â  Â  Â  <div class="remember-wrapper">
Â  Â  Â  Â  Â  Â  Â  <input type="checkbox" id="remember" name="remember">
Â  Â  Â  Â  Â  Â  Â  <label for="remember">Remember me</label>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <a href="{{ url_for('forgot_password') }}" class="forgot-link">Forgot password?</a>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div id="password-error" class="error-message hidden">
Â  Â  Â  Â  Â  Â  <i class="fas fa-exclamation-circle"></i>
Â  Â  Â  Â  Â  Â  <span></span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>


Â  Â  Â  Â  <!-- CSRF Token for Flask-WTF if you're using it -->
Â  Â  Â  Â  {{ csrf_token() if csrf_token }}
Â  Â  Â  Â  
Â  Â  Â  Â  <button type="submit" class="btn-primary" id="login-btn">
Â  Â  Â  Â  Â  <i class="fas fa-sign-in-alt"></i>
Â  Â  Â  Â  Â  Sign In
Â  Â  Â  Â  </button>


Â  Â  Â  Â  <div class="switch-form">
Â  Â  Â  Â  Â  <p>Don't have an account?</p>
Â  Â  Â  Â  Â  <a href="{{ url_for('signup') }}">
Â  Â  Â  Â  Â  Â  <i class="fas fa-user-plus"></i>
Â  Â  Â  Â  Â  Â  Create an account
Â  Â  Â  Â  Â  </a>
Â  Â  Â  Â  </div>
Â  Â  Â  </form>


Â  Â  Â  <div class="footer-links">
Â  Â  Â  Â  <a href="{{ url_for('index') }}">
Â  Â  Â  Â  Â  <i class="fas fa-arrow-left"></i>
Â  Â  Â  Â  Â  Back to Home
Â  Â  Â  Â  </a>
Â  Â  Â  </div>
Â  Â  </div>
Â  </div>


Â  <script>
Â  Â  // Supabase configuration - replace with your actual values
Â  Â  const SUPABASE_URL = '{{ config.SUPABASE_URL }}';
Â  Â  const SUPABASE_ANON_KEY = '{{ config.SUPABASE_ANON_KEY }}';
Â  Â  
Â  Â  // Initialize Supabase client
Â  Â  const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);


Â  Â  document.addEventListener('DOMContentLoaded', function() {
Â  Â  Â  const loginForm = document.getElementById('login-form');
Â  Â  Â  const loginBtn = document.getElementById('login-btn');
Â  Â  Â  const messageDiv = document.getElementById('message');
Â  Â  Â  const messageText = document.getElementById('message-text');


Â  Â  Â  // Show message function
Â  Â  Â  function showMessage(message, type = 'info') {
Â  Â  Â  Â  messageDiv.className = `message ${type}`;
Â  Â  Â  Â  messageText.textContent = message;
Â  Â  Â  Â  messageDiv.classList.remove('hidden');
Â  Â  Â  Â  
Â  Â  Â  Â  // Auto hide after 5 seconds
Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  messageDiv.classList.add('hidden');
Â  Â  Â  Â  }, 5000);
Â  Â  Â  }


Â  Â  Â  // Show error function
Â  Â  Â  function showError(fieldId, message) {
Â  Â  Â  Â  const errorDiv = document.getElementById(`${fieldId}-error`);
Â  Â  Â  Â  const errorSpan = errorDiv.querySelector('span');
Â  Â  Â  Â  errorSpan.textContent = message;
Â  Â  Â  Â  errorDiv.classList.remove('hidden');
Â  Â  Â  }


Â  Â  Â  // Clear errors function
Â  Â  Â  function clearErrors() {
Â  Â  Â  Â  document.querySelectorAll('.error-message').forEach(error => {
Â  Â  Â  Â  Â  error.classList.add('hidden');
Â  Â  Â  Â  });
Â  Â  Â  }


Â  Â  Â  // Form validation
Â  Â  Â  function validateForm() {
Â  Â  Â  Â  clearErrors();
Â  Â  Â  Â  let isValid = true;


Â  Â  Â  Â  const email = document.getElementById('email').value.trim();
Â  Â  Â  Â  const password = document.getElementById('password').value;


Â  Â  Â  Â  if (!email) {
Â  Â  Â  Â  Â  showError('email', 'Email address is required');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  } else if (!/\S+@\S+\.\S+/.test(email)) {
Â  Â  Â  Â  Â  showError('email', 'Please enter a valid email address');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  }


Â  Â  Â  Â  if (!password) {
Â  Â  Â  Â  Â  showError('password', 'Password is required');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  } else if (password.length < 6) {
Â  Â  Â  Â  Â  showError('password', 'Password must be at least 6 characters long');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  }


Â  Â  Â  Â  return isValid;
Â  Â  Â  }


Â  Â  Â  // Handle form submission
Â  Â  Â  loginForm.addEventListener('submit', async function(e) {
Â  Â  Â  Â  e.preventDefault();


Â  Â  Â  Â  if (!validateForm()) {
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }


Â  Â  Â  Â  // Show loading state
Â  Â  Â  Â  loginBtn.disabled = true;
Â  Â  Â  Â  loginBtn.innerHTML = '<div class="loading"></div> Signing In...';


Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // Get form data
Â  Â  Â  Â  Â  const email = document.getElementById('email').value.trim();
Â  Â  Â  Â  Â  const password = document.getElementById('password').value;
Â  Â  Â  Â  Â  const remember = document.getElementById('remember').checked;


Â  Â  Â  Â  Â  // Authenticate with Supabase
Â  Â  Â  Â  Â  const { data, error } = await supabase.auth.signInWithPassword({
Â  Â  Â  Â  Â  Â  email: email,
Â  Â  Â  Â  Â  Â  password: password
Â  Â  Â  Â  Â  });


Â  Â  Â  Â  Â  if (error) {
Â  Â  Â  Â  Â  Â  throw error;
Â  Â  Â  Â  Â  }


Â  Â  Â  Â  Â  // Store user session if remember me is checked
Â  Â  Â  Â  Â  if (remember) {
Â  Â  Â  Â  Â  Â  localStorage.setItem('taaza_mandi_remember', 'true');
Â  Â  Â  Â  Â  }


Â  Â  Â  Â  Â  showMessage('ðŸŽ‰ Login successful! Redirecting to dashboard...', 'success');
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  // Redirect to user selection or dashboard
Â  Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  Â  window.location.href = "{{ url_for('user_select') }}";
Â  Â  Â  Â  Â  }, 1500);


Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error('Login error:', error);
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  let errorMessage = 'Login failed. Please try again.';
Â  Â  Â  Â  Â  if (error.message.includes('Invalid login credentials')) {
Â  Â  Â  Â  Â  Â  errorMessage = 'Invalid email or password. Please check your credentials.';
Â  Â  Â  Â  Â  } else if (error.message.includes('Email not confirmed')) {
Â  Â  Â  Â  Â  Â  errorMessage = 'Please check your email and confirm your account.';
Â  Â  Â  Â  Â  } else if (error.message.includes('Too many requests')) {
Â  Â  Â  Â  Â  Â  errorMessage = 'Too many login attempts. Please try again later.';
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  showMessage('âŒ ' + errorMessage, 'error');
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  // Reset button state
Â  Â  Â  Â  Â  loginBtn.disabled = false;
Â  Â  Â  Â  Â  loginBtn.innerHTML = '<i class="fas fa-sign-in-alt"></i> Sign In';
Â  Â  Â  Â  }
Â  Â  Â  });


Â  Â  Â  // Real-time validation
Â  Â  Â  document.getElementById('email').addEventListener('blur', function() {
Â  Â  Â  Â  const email = this.value.trim();
Â  Â  Â  Â  if (email && !/\S+@\S+\.\S+/.test(email)) {
Â  Â  Â  Â  Â  showError('email', 'Please enter a valid email address');
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  document.getElementById('email-error').classList.add('hidden');
Â  Â  Â  Â  }
Â  Â  Â  });


Â  Â  Â  document.getElementById('password').addEventListener('input', function() {
Â  Â  Â  Â  if (this.value.length > 0 && this.value.length < 6) {
Â  Â  Â  Â  Â  showError('password', 'Password must be at least 6 characters long');
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  document.getElementById('password-error').classList.add('hidden');
Â  Â  Â  Â  }
Â  Â  Â  });


Â  Â  Â  // Check for existing session on page load
Â  Â  Â  checkExistingSession();


Â  Â  Â  async function checkExistingSession() {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const { data: { session } } = await supabase.auth.getSession();
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  if (session) {
Â  Â  Â  Â  Â  Â  showMessage('You are already logged in. Redirecting...', 'info');
Â  Â  Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  Â  Â  window.location.href = "{{ url_for('user_select') }}";
Â  Â  Â  Â  Â  Â  }, 1500);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error('Session check error:', error);
Â  Â  Â  Â  }
Â  Â  Â  }


Â  Â  Â  // Add entrance animation
Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  document.querySelector('.auth-container').style.opacity = '0';
Â  Â  Â  Â  document.querySelector('.auth-container').style.transform = 'translateY(20px)';
Â  Â  Â  Â  document.querySelector('.auth-container').style.transition = 'all 0.6s ease';
Â  Â  Â  Â  
Â  Â  Â  Â  requestAnimationFrame(() => {
Â  Â  Â  Â  Â  document.querySelector('.auth-container').style.opacity = '1';
Â  Â  Â  Â  Â  document.querySelector('.auth-container').style.transform = 'translateY(0)';
Â  Â  Â  Â  });
Â  Â  Â  }, 100);


Â  Â  Â  // Check for URL parameters (like success/error messages)
Â  Â  Â  const urlParams = new URLSearchParams(window.location.search);
Â  Â  Â  const message = urlParams.get('message');
Â  Â  Â  const type = urlParams.get('type') || 'info';
Â  Â  Â  
Â  Â  Â  if (message) {
Â  Â  Â  Â  showMessage(decodeURIComponent(message), type);
Â  Â  Â  }
Â  Â  });
Â  </script>
</body>
</html>
this is my login.html

<!DOCTYPE html>
<html lang="en">
<head>
Â  <meta charset="UTF-8">
Â  <meta name="viewport" content="width=device-width, initial-scale=1.0">
Â  <title>TAAZA MANDI - Sign Up</title>
Â  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
Â  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
Â  <script src="https://unpkg.com/@supabase/supabase-js"></script>
Â  <style>
Â  Â  :root {
Â  Â  Â  --primary-green: #2d5f3f;
Â  Â  Â  --secondary-green: #4a8f5f;
Â  Â  Â  --accent-green: #6bb77b;
Â  Â  Â  --light-green: #e8f5e8;
Â  Â  Â  --ultra-light-green: #f4fbf4;
Â  Â  Â  --background: linear-gradient(135deg, #f8fbf8 0%, #f0f8f0 100%);
Â  Â  Â  --card-bg: #ffffff;
Â  Â  Â  --text-primary: #1a1a1a;
Â  Â  Â  --text-secondary: #4a5568;
Â  Â  Â  --text-light: #718096;
Â  Â  Â  --border-light: #e2e8f0;
Â  Â  Â  --shadow-sm: 0 2px 4px rgba(0,0,0,0.04);
Â  Â  Â  --shadow-md: 0 4px 12px rgba(0,0,0,0.08);
Â  Â  Â  --shadow-lg: 0 8px 24px rgba(0,0,0,0.12);
Â  Â  Â  --shadow-xl: 0 12px 32px rgba(0,0,0,0.16);
Â  Â  Â  --radius-sm: 8px;
Â  Â  Â  --radius-md: 12px;
Â  Â  Â  --radius-lg: 16px;
Â  Â  Â  --radius-xl: 20px;
Â  Â  Â  --success: #48bb78;
Â  Â  Â  --warning: #ed8936;
Â  Â  Â  --error: #f56565;
Â  Â  }


Â  Â  * {
Â  Â  Â  margin: 0;
Â  Â  Â  padding: 0;
Â  Â  Â  box-sizing: border-box;
Â  Â  }


Â  Â  body {
Â  Â  Â  background: var(--background);
Â  Â  Â  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
Â  Â  Â  color: var(--text-primary);
Â  Â  Â  line-height: 1.6;
Â  Â  Â  min-height: 100vh;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  justify-content: center;
Â  Â  Â  padding: 1rem;
Â  Â  }


Â  Â  .auth-container {
Â  Â  Â  display: grid;
Â  Â  Â  grid-template-columns: 1fr 1fr;
Â  Â  Â  width: 100%;
Â  Â  Â  max-width: 1200px;
Â  Â  Â  min-height: 700px;
Â  Â  Â  background: var(--card-bg);
Â  Â  Â  border-radius: var(--radius-xl);
Â  Â  Â  box-shadow: var(--shadow-xl);
Â  Â  Â  overflow: hidden;
Â  Â  Â  position: relative;
Â  Â  }


Â  Â  .auth-container::before {
Â  Â  Â  content: '';
Â  Â  Â  position: absolute;
Â  Â  Â  top: 0;
Â  Â  Â  left: 0;
Â  Â  Â  right: 0;
Â  Â  Â  height: 4px;
Â  Â  Â  background: linear-gradient(90deg, var(--primary-green), var(--secondary-green), var(--accent-green));
Â  Â  }


Â  Â  /* Left Side - Image */
Â  Â  .auth-left {
Â  Â  Â  background: linear-gradient(135deg, var(--secondary-green) 0%, var(--accent-green) 100%);
Â  Â  Â  display: flex;
Â  Â  Â  flex-direction: column;
Â  Â  Â  align-items: center;
Â  Â  Â  justify-content: center;
Â  Â  Â  padding: 3rem 2rem;
Â  Â  Â  position: relative;
Â  Â  Â  overflow: hidden;
Â  Â  }


Â  Â  .auth-left::before {
Â  Â  Â  content: '';
Â  Â  Â  position: absolute;
Â  Â  Â  top: 0;
Â  Â  Â  left: 0;
Â  Â  Â  right: 0;
Â  Â  Â  bottom: 0;
Â  Â  Â  background-image: 
Â  Â  Â  Â  url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
Â  Â  Â  opacity: 0.1;
Â  Â  }


Â  Â  .auth-left-content {
Â  Â  Â  text-align: center;
Â  Â  Â  color: white;
Â  Â  Â  position: relative;
Â  Â  Â  z-index: 1;
Â  Â  }


Â  Â  .auth-left h2 {
Â  Â  Â  font-size: 3rem;
Â  Â  Â  font-weight: 800;
Â  Â  Â  margin-bottom: 1rem;
Â  Â  Â  background: linear-gradient(135deg, white, rgba(255,255,255,0.8));
Â  Â  Â  -webkit-background-clip: text;
Â  Â  Â  -webkit-text-fill-color: transparent;
Â  Â  Â  background-clip: text;
Â  Â  }


Â  Â  .auth-left p {
Â  Â  Â  font-size: 1.2rem;
Â  Â  Â  color: rgba(255,255,255,0.9);
Â  Â  Â  margin-bottom: 2rem;
Â  Â  Â  max-width: 400px;
Â  Â  }


Â  Â  .auth-left-icon {
Â  Â  Â  font-size: 8rem;
Â  Â  Â  color: rgba(255,255,255,0.2);
Â  Â  Â  margin-bottom: 2rem;
Â  Â  Â  animation: float 3s ease-in-out infinite;
Â  Â  }


Â  Â  @keyframes float {
Â  Â  Â  0%, 100% { transform: translateY(0px); }
Â  Â  Â  50% { transform: translateY(-20px); }
Â  Â  }


Â  Â  /* Right Side - Form */
Â  Â  .auth-right {
Â  Â  Â  padding: 3rem 2rem;
Â  Â  Â  display: flex;
Â  Â  Â  flex-direction: column;
Â  Â  Â  justify-content: center;
Â  Â  Â  position: relative;
Â  Â  Â  max-height: 700px;
Â  Â  Â  overflow-y: auto;
Â  Â  }


Â  Â  .brand {
Â  Â  Â  text-align: center;
Â  Â  Â  margin-bottom: 2rem;
Â  Â  }


Â  Â  .brand h2 {
Â  Â  Â  font-size: 2rem;
Â  Â  Â  font-weight: 800;
Â  Â  Â  background: linear-gradient(135deg, var(--primary-green), var(--secondary-green));
Â  Â  Â  -webkit-background-clip: text;
Â  Â  Â  -webkit-text-fill-color: transparent;
Â  Â  Â  background-clip: text;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  justify-content: center;
Â  Â  Â  gap: 0.75rem;
Â  Â  }


Â  Â  .form-header {
Â  Â  Â  text-align: center;
Â  Â  Â  margin-bottom: 2rem;
Â  Â  }


Â  Â  .form-header h3 {
Â  Â  Â  font-size: 2rem;
Â  Â  Â  font-weight: 700;
Â  Â  Â  color: var(--text-primary);
Â  Â  Â  margin-bottom: 0.5rem;
Â  Â  }


Â  Â  .form-header p {
Â  Â  Â  color: var(--text-secondary);
Â  Â  Â  font-size: 1rem;
Â  Â  }


Â  Â  /* User Type Selection */
Â  Â  .user-type-selection {
Â  Â  Â  display: grid;
Â  Â  Â  grid-template-columns: 1fr 1fr;
Â  Â  Â  gap: 1rem;
Â  Â  Â  margin-bottom: 1.5rem;
Â  Â  }


Â  Â  .user-type-card {
Â  Â  Â  padding: 1.5rem 1rem;
Â  Â  Â  border: 2px solid var(--border-light);
Â  Â  Â  border-radius: var(--radius-md);
Â  Â  Â  text-align: center;
Â  Â  Â  cursor: pointer;
Â  Â  Â  transition: all 0.3s ease;
Â  Â  Â  background: var(--ultra-light-green);
Â  Â  }


Â  Â  .user-type-card:hover {
Â  Â  Â  border-color: var(--secondary-green);
Â  Â  Â  background: var(--light-green);
Â  Â  }


Â  Â  .user-type-card.selected {
Â  Â  Â  border-color: var(--secondary-green);
Â  Â  Â  background: var(--light-green);
Â  Â  Â  box-shadow: 0 0 0 3px rgba(106, 183, 123, 0.1);
Â  Â  }


Â  Â  .user-type-card i {
Â  Â  Â  font-size: 2rem;
Â  Â  Â  color: var(--secondary-green);
Â  Â  Â  margin-bottom: 0.5rem;
Â  Â  }


Â  Â  .user-type-card h4 {
Â  Â  Â  font-weight: 600;
Â  Â  Â  color: var(--text-primary);
Â  Â  Â  margin-bottom: 0.25rem;
Â  Â  }


Â  Â  .user-type-card p {
Â  Â  Â  font-size: 0.85rem;
Â  Â  Â  color: var(--text-secondary);
Â  Â  }


Â  Â  /* Form Styles */
Â  Â  .auth-form {
Â  Â  Â  display: flex;
Â  Â  Â  flex-direction: column;
Â  Â  Â  gap: 1.25rem;
Â  Â  }


Â  Â  .form-group {
Â  Â  Â  display: flex;
Â  Â  Â  flex-direction: column;
Â  Â  }


Â  Â  .form-row {
Â  Â  Â  display: grid;
Â  Â  Â  grid-template-columns: 1fr 1fr;
Â  Â  Â  gap: 1rem;
Â  Â  }


Â  Â  .auth-form label {
Â  Â  Â  font-weight: 600;
Â  Â  Â  color: var(--text-primary);
Â  Â  Â  margin-bottom: 0.5rem;
Â  Â  Â  font-size: 0.95rem;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  gap: 0.5rem;
Â  Â  }


Â  Â  .input-wrapper {
Â  Â  Â  position: relative;
Â  Â  }


Â  Â  .auth-form input, .auth-form select {
Â  Â  Â  width: 100%;
Â  Â  Â  padding: 1rem 1rem 1rem 3rem;
Â  Â  Â  border: 2px solid var(--border-light);
Â  Â  Â  border-radius: var(--radius-md);
Â  Â  Â  font-size: 1rem;
Â  Â  Â  background: var(--ultra-light-green);
Â  Â  Â  transition: all 0.3s ease;
Â  Â  Â  font-family: inherit;
Â  Â  }


Â  Â  .auth-form input:focus, .auth-form select:focus {
Â  Â  Â  outline: none;
Â  Â  Â  border-color: var(--secondary-green);
Â  Â  Â  background: white;
Â  Â  Â  box-shadow: 0 0 0 3px rgba(106, 183, 123, 0.1);
Â  Â  }


Â  Â  .input-icon {
Â  Â  Â  position: absolute;
Â  Â  Â  left: 1rem;
Â  Â  Â  top: 50%;
Â  Â  Â  transform: translateY(-50%);
Â  Â  Â  color: var(--text-light);
Â  Â  Â  font-size: 1rem;
Â  Â  }


Â  Â  .password-strength {
Â  Â  Â  margin-top: 0.5rem;
Â  Â  }


Â  Â  .strength-bar {
Â  Â  Â  height: 4px;
Â  Â  Â  background: var(--border-light);
Â  Â  Â  border-radius: 2px;
Â  Â  Â  overflow: hidden;
Â  Â  Â  margin-bottom: 0.5rem;
Â  Â  }


Â  Â  .strength-fill {
Â  Â  Â  height: 100%;
Â  Â  Â  transition: all 0.3s ease;
Â  Â  Â  width: 0%;
Â  Â  }


Â  Â  .strength-fill.weak { background: var(--error); width: 25%; }
Â  Â  .strength-fill.fair { background: var(--warning); width: 50%; }
Â  Â  .strength-fill.good { background: var(--success); width: 75%; }
Â  Â  .strength-fill.strong { background: var(--accent-green); width: 100%; }


Â  Â  .password-requirements {
Â  Â  Â  font-size: 0.8rem;
Â  Â  Â  color: var(--text-light);
Â  Â  Â  line-height: 1.4;
Â  Â  }


Â  Â  .requirement {
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  gap: 0.5rem;
Â  Â  Â  margin-bottom: 0.25rem;
Â  Â  }


Â  Â  .requirement.met { color: var(--success); }
Â  Â  .requirement.unmet { color: var(--text-light); }


Â  Â  .btn-primary {
Â  Â  Â  background: linear-gradient(135deg, var(--primary-green), var(--secondary-green));
Â  Â  Â  color: white;
Â  Â  Â  border: none;
Â  Â  Â  padding: 1rem 2rem;
Â  Â  Â  border-radius: var(--radius-md);
Â  Â  Â  font-weight: 700;
Â  Â  Â  font-size: 1rem;
Â  Â  Â  cursor: pointer;
Â  Â  Â  transition: all 0.3s ease;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  justify-content: center;
Â  Â  Â  gap: 0.5rem;
Â  Â  Â  box-shadow: var(--shadow-md);
Â  Â  Â  margin-top: 1rem;
Â  Â  }


Â  Â  .btn-primary:hover {
Â  Â  Â  transform: translateY(-2px);
Â  Â  Â  box-shadow: var(--shadow-xl);
Â  Â  }


Â  Â  .btn-primary:disabled {
Â  Â  Â  opacity: 0.7;
Â  Â  Â  cursor: not-allowed;
Â  Â  Â  transform: none;
Â  Â  }


Â  Â  .switch-form {
Â  Â  Â  text-align: center;
Â  Â  Â  margin-top: 1.5rem;
Â  Â  Â  padding-top: 1.5rem;
Â  Â  Â  border-top: 1px solid var(--border-light);
Â  Â  }


Â  Â  .switch-form p {
Â  Â  Â  color: var(--text-secondary);
Â  Â  Â  margin-bottom: 1rem;
Â  Â  }


Â  Â  .switch-form a {
Â  Â  Â  color: var(--secondary-green);
Â  Â  Â  text-decoration: none;
Â  Â  Â  font-weight: 600;
Â  Â  Â  transition: all 0.3s ease;
Â  Â  }


Â  Â  .switch-form a:hover {
Â  Â  Â  color: var(--primary-green);
Â  Â  }


Â  Â  /* Terms and Privacy */
Â  Â  .terms-wrapper {
Â  Â  Â  display: flex;
Â  Â  Â  align-items: flex-start;
Â  Â  Â  gap: 0.75rem;
Â  Â  Â  margin: 1rem 0;
Â  Â  Â  font-size: 0.9rem;
Â  Â  }


Â  Â  .terms-wrapper input[type="checkbox"] {
Â  Â  Â  width: 18px;
Â  Â  Â  height: 18px;
Â  Â  Â  accent-color: var(--secondary-green);
Â  Â  Â  margin-top: 0.125rem;
Â  Â  Â  flex-shrink: 0;
Â  Â  }


Â  Â  .terms-wrapper label {
Â  Â  Â  color: var(--text-secondary);
Â  Â  Â  line-height: 1.4;
Â  Â  Â  cursor: pointer;
Â  Â  Â  margin-bottom: 0;
Â  Â  Â  font-weight: 500;
Â  Â  }


Â  Â  .terms-wrapper a {
Â  Â  Â  color: var(--secondary-green);
Â  Â  Â  text-decoration: none;
Â  Â  }


Â  Â  .terms-wrapper a:hover {
Â  Â  Â  text-decoration: underline;
Â  Â  }


Â  Â  /* Error Messages */
Â  Â  .error-message {
Â  Â  Â  color: var(--error);
Â  Â  Â  font-size: 0.85rem;
Â  Â  Â  margin-top: 0.25rem;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  gap: 0.375rem;
Â  Â  }


Â  Â  /* Success/Info Messages */
Â  Â  .message {
Â  Â  Â  padding: 1rem;
Â  Â  Â  border-radius: var(--radius-md);
Â  Â  Â  margin-bottom: 1.5rem;
Â  Â  Â  display: flex;
Â  Â  Â  align-items: center;
Â  Â  Â  gap: 0.75rem;
Â  Â  Â  font-weight: 500;
Â  Â  }


Â  Â  .message.success {
Â  Â  Â  background: rgba(72, 187, 120, 0.1);
Â  Â  Â  color: var(--success);
Â  Â  Â  border: 1px solid rgba(72, 187, 120, 0.2);
Â  Â  }


Â  Â  .message.error {
Â  Â  Â  background: rgba(245, 101, 101, 0.1);
Â  Â  Â  color: var(--error);
Â  Â  Â  border: 1px solid rgba(245, 101, 101, 0.2);
Â  Â  }


Â  Â  /* Footer Links */
Â  Â  .footer-links {
Â  Â  Â  text-align: center;
Â  Â  Â  margin-top: 2rem;
Â  Â  Â  padding-top: 1.5rem;
Â  Â  Â  border-top: 1px solid var(--border-light);
Â  Â  }


Â  Â  .footer-links a {
Â  Â  Â  color: var(--text-secondary);
Â  Â  Â  text-decoration: none;
Â  Â  Â  font-weight: 500;
Â  Â  Â  display: inline-flex;
Â  Â  Â  align-items: center;
Â  Â  Â  gap: 0.5rem;
Â  Â  Â  transition: all 0.3s ease;
Â  Â  }


Â  Â  .footer-links a:hover {
Â  Â  Â  color: var(--secondary-green);
Â  Â  Â  transform: translateX(-2px);
Â  Â  }


Â  Â  /* Loading Animation */
Â  Â  .loading {
Â  Â  Â  display: inline-block;
Â  Â  Â  width: 20px;
Â  Â  Â  height: 20px;
Â  Â  Â  border: 3px solid rgba(255,255,255,0.3);
Â  Â  Â  border-radius: 50%;
Â  Â  Â  border-top-color: white;
Â  Â  Â  animation: spin 1s ease-in-out infinite;
Â  Â  }


Â  Â  @keyframes spin {
Â  Â  Â  to { transform: rotate(360deg); }
Â  Â  }


Â  Â  /* Hidden State */
Â  Â  .hidden {
Â  Â  Â  display: none;
Â  Â  }


Â  Â  /* Responsive Design */
Â  Â  @media (max-width: 1024px) {
Â  Â  Â  .auth-container {
Â  Â  Â  Â  grid-template-columns: 1fr;
Â  Â  Â  Â  max-width: 600px;
Â  Â  Â  }


Â  Â  Â  .auth-left {
Â  Â  Â  Â  display: none;
Â  Â  Â  }


Â  Â  Â  .auth-right {
Â  Â  Â  Â  padding: 2rem 1.5rem;
Â  Â  Â  Â  max-height: none;
Â  Â  Â  }
Â  Â  }


Â  Â  @media (max-width: 768px) {
Â  Â  Â  body {
Â  Â  Â  Â  padding: 0.5rem;
Â  Â  Â  }


Â  Â  Â  .auth-container {
Â  Â  Â  Â  min-height: auto;
Â  Â  Â  }


Â  Â  Â  .auth-right {
Â  Â  Â  Â  padding: 1.5rem 1rem;
Â  Â  Â  }


Â  Â  Â  .form-header h3 {
Â  Â  Â  Â  font-size: 1.75rem;
Â  Â  Â  }


Â  Â  Â  .auth-left h2 {
Â  Â  Â  Â  font-size: 2.5rem;
Â  Â  Â  }


Â  Â  Â  .form-row {
Â  Â  Â  Â  grid-template-columns: 1fr;
Â  Â  Â  }


Â  Â  Â  .user-type-selection {
Â  Â  Â  Â  grid-template-columns: 1fr;
Â  Â  Â  }
Â  Â  }


Â  Â  /* Focus States */
Â  Â  *:focus {
Â  Â  Â  outline: 2px solid var(--secondary-green);
Â  Â  Â  outline-offset: 2px;
Â  Â  }
Â  </style>
</head>
<body>
Â  <div class="auth-container">
Â  Â  <!-- Left Side - Welcome -->
Â  Â  <div class="auth-left">
Â  Â  Â  <div class="auth-left-content">
Â  Â  Â  Â  <div class="auth-left-icon">
Â  Â  Â  Â  Â  <i class="fas fa-user-plus"></i>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <h2>Join Our Community!</h2>
Â  Â  Â  Â  <p>Connect with thousands of farmers and buyers. Start your journey towards sustainable agriculture and fair trade.</p>
Â  Â  Â  </div>
Â  Â  </div>


Â  Â  <!-- Right Side - Sign Up Form -->
Â  Â  <div class="auth-right">
Â  Â  Â  <div class="brand">
Â  Â  Â  Â  <h2>
Â  Â  Â  Â  Â  <i class="fas fa-seedling"></i>
Â  Â  Â  Â  Â  TAAZA MANDI
Â  Â  Â  Â  </h2>
Â  Â  Â  </div>


Â  Â  Â  <div class="form-header">
Â  Â  Â  Â  <h3>Create Account</h3>
Â  Â  Â  Â  <p>Join our community of farmers and buyers</p>
Â  Â  Â  </div>


Â  Â  Â  <div id="message" class="message hidden">
Â  Â  Â  Â  <i class="fas fa-info-circle"></i>
Â  Â  Â  Â  <span id="message-text"></span>
Â  Â  Â  </div>


Â  Â  Â  <form id="signup-form" class="auth-form">
Â  Â  Â  Â  <!-- User Type Selection -->
Â  Â  Â  Â  <div class="user-type-selection">
Â  Â  Â  Â  Â  <div class="user-type-card" data-type="farmer">
Â  Â  Â  Â  Â  Â  <i class="fas fa-tractor"></i>
Â  Â  Â  Â  Â  Â  <h4>Farmer</h4>
Â  Â  Â  Â  Â  Â  <p>Sell your produce directly</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div class="user-type-card" data-type="buyer">
Â  Â  Â  Â  Â  Â  <i class="fas fa-shopping-cart"></i>
Â  Â  Â  Â  Â  Â  <h4>Buyer</h4>
Â  Â  Â  Â  Â  Â  <p>Buy fresh from farms</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <input type="hidden" id="userType" name="userType" required>


Â  Â  Â  Â  <div class="form-row">
Â  Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  Â  <label for="firstName">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-user"></i>
Â  Â  Â  Â  Â  Â  Â  First Name
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  <div class="input-wrapper">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-user input-icon"></i>
Â  Â  Â  Â  Â  Â  Â  <input type="text" id="firstName" name="firstName" placeholder="Enter first name" required>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div id="firstName-error" class="error-message hidden">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-exclamation-circle"></i>
Â  Â  Â  Â  Â  Â  Â  <span></span>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>


Â  Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  Â  <label for="lastName">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-user"></i>
Â  Â  Â  Â  Â  Â  Â  Last Name
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  <div class="input-wrapper">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-user input-icon"></i>
Â  Â  Â  Â  Â  Â  Â  <input type="text" id="lastName" name="lastName" placeholder="Enter last name" required>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div id="lastName-error" class="error-message hidden">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-exclamation-circle"></i>
Â  Â  Â  Â  Â  Â  Â  <span></span>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>


Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  <label for="email">
Â  Â  Â  Â  Â  Â  <i class="fas fa-envelope"></i>
Â  Â  Â  Â  Â  Â  Email Address
Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  <div class="input-wrapper">
Â  Â  Â  Â  Â  Â  <i class="fas fa-envelope input-icon"></i>
Â  Â  Â  Â  Â  Â  <input type="email" id="email" name="email" placeholder="Enter your email address" required>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div id="email-error" class="error-message hidden">
Â  Â  Â  Â  Â  Â  <i class="fas fa-exclamation-circle"></i>
Â  Â  Â  Â  Â  Â  <span></span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>


Â  Â  Â  Â  <div class="form-row">
Â  Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  Â  <label for="phone">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-phone"></i>
Â  Â  Â  Â  Â  Â  Â  Phone Number
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  <div class="input-wrapper">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-phone input-icon"></i>
Â  Â  Â  Â  Â  Â  Â  <input type="tel" id="phone" name="phone" placeholder="Enter phone number" required>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div id="phone-error" class="error-message hidden">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-exclamation-circle"></i>
Â  Â  Â  Â  Â  Â  Â  <span></span>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>


Â  Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  Â  <label for="state">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-map-marker-alt"></i>
Â  Â  Â  Â  Â  Â  Â  State
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  <div class="input-wrapper">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-map-marker-alt input-icon"></i>
Â  Â  Â  Â  Â  Â  Â  <select id="state" name="state" required>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select your state</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Andhra Pradesh">Andhra Pradesh</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Arunachal Pradesh">Arunachal Pradesh</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Assam">Assam</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Bihar">Bihar</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Chhattisgarh">Chhattisgarh</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Goa">Goa</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Gujarat">Gujarat</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Haryana">Haryana</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Himachal Pradesh">Himachal Pradesh</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Jharkhand">Jharkhand</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Karnataka">Karnataka</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Kerala">Kerala</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Madhya Pradesh">Madhya Pradesh</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Maharashtra">Maharashtra</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Manipur">Manipur</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Meghalaya">Meghalaya</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Mizoram">Mizoram</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Nagaland">Nagaland</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Odisha">Odisha</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Punjab">Punjab</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Rajasthan">Rajasthan</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Sikkim">Sikkim</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Tamil Nadu">Tamil Nadu</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Telangana">Telangana</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Tripura">Tripura</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Uttar Pradesh">Uttar Pradesh</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Uttarakhand">Uttarakhand</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="West Bengal">West Bengal</option>
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div id="state-error" class="error-message hidden">
Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-exclamation-circle"></i>
Â  Â  Â  Â  Â  Â  Â  <span></span>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>


Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  <label for="password">
Â  Â  Â  Â  Â  Â  <i class="fas fa-lock"></i>
Â  Â  Â  Â  Â  Â  Password
Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  <div class="input-wrapper">
Â  Â  Â  Â  Â  Â  <i class="fas fa-lock input-icon"></i>
Â  Â  Â  Â  Â  Â  <input type="password" id="password" name="password" placeholder="Create a strong password" required>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div class="password-strength">
Â  Â  Â  Â  Â  Â  <div class="strength-bar">
Â  Â  Â  Â  Â  Â  Â  <div class="strength-fill" id="strengthFill"></div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div class="password-requirements">
Â  Â  Â  Â  Â  Â  Â  <div class="requirement unmet" id="req-length">
Â  Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-circle"></i>
Â  Â  Â  Â  Â  Â  Â  Â  At least 8 characters
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div class="requirement unmet" id="req-upper">
Â  Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-circle"></i>
Â  Â  Â  Â  Â  Â  Â  Â  One uppercase letter
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div class="requirement unmet" id="req-lower">
Â  Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-circle"></i>
Â  Â  Â  Â  Â  Â  Â  Â  One lowercase letter
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div class="requirement unmet" id="req-number">
Â  Â  Â  Â  Â  Â  Â  Â  <i class="fas fa-circle"></i>
Â  Â  Â  Â  Â  Â  Â  Â  One number
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div id="password-error" class="error-message hidden">
Â  Â  Â  Â  Â  Â  <i class="fas fa-exclamation-circle"></i>
Â  Â  Â  Â  Â  Â  <span></span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>


Â  Â  Â  Â  <div class="form-group">
Â  Â  Â  Â  Â  <label for="confirmPassword">
Â  Â  Â  Â  Â  Â  <i class="fas fa-lock"></i>
Â  Â  Â  Â  Â  Â  Confirm Password
Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  <div class="input-wrapper">
Â  Â  Â  Â  Â  Â  <i class="fas fa-lock input-icon"></i>
Â  Â  Â  Â  Â  Â  <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Repeat your password" required>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <div id="confirmPassword-error" class="error-message hidden">
Â  Â  Â  Â  Â  Â  <i class="fas fa-exclamation-circle"></i>
Â  Â  Â  Â  Â  Â  <span></span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>


Â  Â  Â  Â  <div class="terms-wrapper">
Â  Â  Â  Â  Â  <input type="checkbox" id="terms" name="terms" required>
Â  Â  Â  Â  Â  <label for="terms">
Â  Â  Â  Â  Â  Â  I agree to the <a href="terms.html" target="_blank">Terms of Service</a> and <a href="privacy.html" target="_blank">Privacy Policy</a>
Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  </div>


Â  Â  Â  Â  <button type="submit" class="btn-primary" id="signup-btn">
Â  Â  Â  Â  Â  <i class="fas fa-user-plus"></i>
Â  Â  Â  Â  Â  Create Account
Â  Â  Â  Â  </button>


Â  Â  Â  Â  <div class="switch-form">
Â  Â  Â  Â  Â  <p>Already have an account?</p>
Â  Â  Â  Â  Â  <a href="login.html">
Â  Â  Â  Â  Â  Â  <i class="fas fa-sign-in-alt"></i>
Â  Â  Â  Â  Â  Â  Sign in to your account
Â  Â  Â  Â  Â  </a>
Â  Â  Â  Â  </div>
Â  Â  Â  </form>


Â  Â  Â  <div class="footer-links">
Â  Â  Â  Â  <a href="index.html">
Â  Â  Â  Â  Â  <i class="fas fa-arrow-left"></i>
Â  Â  Â  Â  Â  Back to Home
Â  Â  Â  Â  </a>
Â  Â  Â  </div>
Â  Â  </div>
Â  </div>


Â  <script>
Â  Â  document.addEventListener('DOMContentLoaded', function() {
Â  Â  Â  const signupForm = document.getElementById('signup-form');
Â  Â  Â  const signupBtn = document.getElementById('signup-btn');
Â  Â  Â  const messageDiv = document.getElementById('message');
Â  Â  Â  const messageText = document.getElementById('message-text');
Â  Â  Â  const passwordInput = document.getElementById('password');
Â  Â  Â  const confirmPasswordInput = document.getElementById('confirmPassword');
Â  Â  Â  const userTypeCards = document.querySelectorAll('.user-type-card');
Â  Â  Â  const userTypeInput = document.getElementById('userType');


Â  Â  Â  // User type selection
Â  Â  Â  userTypeCards.forEach(card => {
Â  Â  Â  Â  card.addEventListener('click', function() {
Â  Â  Â  Â  Â  userTypeCards.forEach(c => c.classList.remove('selected'));
Â  Â  Â  Â  Â  this.classList.add('selected');
Â  Â  Â  Â  Â  userTypeInput.value = this.dataset.type;
Â  Â  Â  Â  });
Â  Â  Â  });


Â  Â  Â  // Password strength checker
Â  Â  Â  passwordInput.addEventListener('input', function() {
Â  Â  Â  Â  const password = this.value;
Â  Â  Â  Â  updatePasswordStrength(password);
Â  Â  Â  });


Â  Â  Â  function updatePasswordStrength(password) {
Â  Â  Â  Â  const requirements = {
Â  Â  Â  Â  Â  'req-length': password.length >= 8,
Â  Â  Â  Â  Â  'req-upper': /[A-Z]/.test(password),
Â  Â  Â  Â  Â  'req-lower': /[a-z]/.test(password),
Â  Â  Â  Â  Â  'req-number': /\d/.test(password)
Â  Â  Â  Â  };


Â  Â  Â  Â  let score = 0;
Â  Â  Â  Â  Object.keys(requirements).forEach(id => {
Â  Â  Â  Â  Â  const element = document.getElementById(id);
Â  Â  Â  Â  Â  if (requirements[id]) {
Â  Â  Â  Â  Â  Â  element.classList.remove('unmet');
Â  Â  Â  Â  Â  Â  element.classList.add('met');
Â  Â  Â  Â  Â  Â  element.querySelector('i').className = 'fas fa-check-circle';
Â  Â  Â  Â  Â  Â  score++;
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  element.classList.remove('met');
Â  Â  Â  Â  Â  Â  element.classList.add('unmet');
Â  Â  Â  Â  Â  Â  element.querySelector('i').className = 'fas fa-circle';
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });


Â  Â  Â  Â  const strengthFill = document.getElementById('strengthFill');
Â  Â  Â  Â  const strengthClass = ['weak', 'fair', 'good', 'strong'][Math.max(0, score - 1)];
Â  Â  Â  Â  strengthFill.className = `strength-fill ${strengthClass}`;
Â  Â  Â  }


Â  Â  Â  // Show message function
Â  Â  Â  function showMessage(message, type = 'info') {
Â  Â  Â  Â  messageDiv.className = `message ${type}`;
Â  Â  Â  Â  messageText.textContent = message;
Â  Â  Â  Â  messageDiv.classList.remove('hidden');
Â  Â  Â  Â  
Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  messageDiv.classList.add('hidden');
Â  Â  Â  Â  }, 5000);
Â  Â  Â  }


Â  Â  Â  // Show error function
Â  Â  Â  function showError(fieldId, message) {
Â  Â  Â  Â  const errorDiv = document.getElementById(`${fieldId}-error`);
Â  Â  Â  Â  const errorSpan = errorDiv.querySelector('span');
Â  Â  Â  Â  errorSpan.textContent = message;
Â  Â  Â  Â  errorDiv.classList.remove('hidden');
Â  Â  Â  }


Â  Â  Â  // Clear errors function
Â  Â  Â  function clearErrors() {
Â  Â  Â  Â  document.querySelectorAll('.error-message').forEach(error => {
Â  Â  Â  Â  Â  error.classList.add('hidden');
Â  Â  Â  Â  });
Â  Â  Â  }


Â  Â  Â  // Form validation
Â  Â  Â  function validateForm() {
Â  Â  Â  Â  clearErrors();
Â  Â  Â  Â  let isValid = true;


Â  Â  Â  Â  // User type validation
Â  Â  Â  Â  if (!userTypeInput.value) {
Â  Â  Â  Â  Â  showMessage('Please select whether you are a farmer or buyer', 'error');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  }


Â  Â  Â  Â  // Name validation
Â  Â  Â  Â  const firstName = document.getElementById('firstName').value.trim();
Â  Â  Â  Â  const lastName = document.getElementById('lastName').value.trim();


Â  Â  Â  Â  if (!firstName) {
Â  Â  Â  Â  Â  showError('firstName', 'First name is required');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  }


Â  Â  Â  Â  if (!lastName) {
Â  Â  Â  Â  Â  showError('lastName', 'Last name is required');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  }


Â  Â  Â  Â  // Email validation
Â  Â  Â  Â  const email = document.getElementById('email').value.trim();
Â  Â  Â  Â  if (!email) {
Â  Â  Â  Â  Â  showError('email', 'Email address is required');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  } else if (!/\S+@\S+\.\S+/.test(email)) {
Â  Â  Â  Â  Â  showError('email', 'Please enter a valid email address');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  }


Â  Â  Â  Â  // Phone validation
Â  Â  Â  Â  const phone = document.getElementById('phone').value.trim();
Â  Â  Â  Â  if (!phone) {
Â  Â  Â  Â  Â  showError('phone', 'Phone number is required');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  } else if (!/^\d{10}$/.test(phone.replace(/\D/g, ''))) {
Â  Â  Â  Â  Â  showError('phone', 'Please enter a valid 10-digit phone number');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  }


Â  Â  Â  Â  // State validation
Â  Â  Â  Â  const state = document.getElementById('state').value;
Â  Â  Â  Â  if (!state) {
Â  Â  Â  Â  Â  showError('state', 'Please select your state');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  }


Â  Â  Â  Â  // Password validation
Â  Â  Â  Â  const password = passwordInput.value;
Â  Â  Â  Â  if (!password) {
Â  Â  Â  Â  Â  showError('password', 'Password is required');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  const hasLength = password.length >= 8;
Â  Â  Â  Â  Â  const hasUpper = /[A-Z]/.test(password);
Â  Â  Â  Â  Â  const hasLower = /[a-z]/.test(password);
Â  Â  Â  Â  Â  const hasNumber = /\d/.test(password);


Â  Â  Â  Â  Â  if (!hasLength || !hasUpper || !hasLower || !hasNumber) {
Â  Â  Â  Â  Â  Â  showError('password', 'Password must meet all requirements');
Â  Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }


Â  Â  Â  Â  // Confirm password validation
Â  Â  Â  Â  const confirmPassword = confirmPasswordInput.value;
Â  Â  Â  Â  if (!confirmPassword) {
Â  Â  Â  Â  Â  showError('confirmPassword', 'Please confirm your password');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  } else if (password !== confirmPassword) {
Â  Â  Â  Â  Â  showError('confirmPassword', 'Passwords do not match');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  }


Â  Â  Â  Â  // Terms validation
Â  Â  Â  Â  const terms = document.getElementById('terms').checked;
Â  Â  Â  Â  if (!terms) {
Â  Â  Â  Â  Â  showMessage('Please accept the Terms of Service and Privacy Policy', 'error');
Â  Â  Â  Â  Â  isValid = false;
Â  Â  Â  Â  }


Â  Â  Â  Â  return isValid;
Â  Â  Â  }


Â  Â  Â  // Handle form submission
Â  Â  Â  signupForm.addEventListener('submit', async function(e) {
Â  Â  Â  Â  e.preventDefault();


Â  Â  Â  Â  if (!validateForm()) {
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }


Â  Â  Â  Â  // Show loading state
Â  Â  Â  Â  signupBtn.disabled = true;
Â  Â  Â  Â  signupBtn.innerHTML = '<div class="loading"></div> Creating Account...';


Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // Simulate signup process
Â  Â  Â  Â  Â  await new Promise(resolve => setTimeout(resolve, 2000));


Â  Â  Â  Â  Â  // Get form data
Â  Â  Â  Â  Â  const formData = new FormData(signupForm);
Â  Â  Â  Â  Â  const userData = {
Â  Â  Â  Â  Â  Â  userType: formData.get('userType'),
Â  Â  Â  Â  Â  Â  firstName: formData.get('firstName'),
Â  Â  Â  Â  Â  Â  lastName: formData.get('lastName'),
Â  Â  Â  Â  Â  Â  email: formData.get('email'),
Â  Â  Â  Â  Â  Â  phone: formData.get('phone'),
Â  Â  Â  Â  Â  Â  state: formData.get('state'),
Â  Â  Â  Â  Â  Â  password: formData.get('password')
Â  Â  Â  Â  Â  };


Â  Â  Â  Â  Â  // Here you would typically make an API call to your backend
Â  Â  Â  Â  Â  console.log('Sign up attempt:', userData);


Â  Â  Â  Â  Â  showMessage('ðŸŽ‰ Account created successfully! Please check your email to verify your account.', 'success');
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  // Simulate redirect after successful signup
Â  Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  Â  window.location.href = 'login.html?message=Please verify your email to complete registration';
Â  Â  Â  Â  Â  }, 3000);


Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error('Sign up error:', error);
Â  Â  Â  Â  Â  showMessage('âŒ Registration failed. Please try again.', 'error');
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  // Reset button state
Â  Â  Â  Â  Â  signupBtn.disabled = false;
Â  Â  Â  Â  Â  signupBtn.innerHTML = '<i class="fas fa-user-plus"></i> Create Account';
Â  Â  Â  Â  }
Â  Â  Â  });


Â  Â  Â  // Real-time validation
Â  Â  Â  document.getElementById('email').addEventListener('blur', function() {
Â  Â  Â  Â  const email = this.value.trim();
Â  Â  Â  Â  if (email && !/\S+@\S+\.\S+/.test(email)) {
Â  Â  Â  Â  Â  showError('email', 'Please enter a valid email address');
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  document.getElementById('email-error').classList.add('hidden');
Â  Â  Â  Â  }
Â  Â  Â  });


Â  Â  Â  confirmPasswordInput.addEventListener('input', function() {
Â  Â  Â  Â  const password = passwordInput.value;
Â  Â  Â  Â  const confirmPassword = this.value;
Â  Â  Â  Â  
Â  Â  Â  Â  if (confirmPassword && password !== confirmPassword) {
Â  Â  Â  Â  Â  showError('confirmPassword', 'Passwords do not match');
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  document.getElementById('confirmPassword-error').classList.add('hidden');
Â  Â  Â  Â  }
Â  Â  Â  });


Â  Â  Â  // Add entrance animation
Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  document.querySelector('.auth-container').style.opacity = '0';
Â  Â  Â  Â  document.querySelector('.auth-container').style.transform = 'translateY(20px)';
Â  Â  Â  Â  document.querySelector('.auth-container').style.transition = 'all 0.6s ease';
Â  Â  Â  Â  
Â  Â  Â  Â  requestAnimationFrame(() => {
Â  Â  Â  Â  Â  document.querySelector('.auth-container').style.opacity = '1';
Â  Â  Â  Â  Â  document.querySelector('.auth-container').style.transform = 'translateY(0)';
Â  Â  Â  Â  });
Â  Â  Â  }, 100);
Â  Â  });
Â  </script>
</body>
</html>
this is my signup.html

from flask import Flask, render_template, request, jsonify, redirect, url_for, session, flash
import jwt
import requests
import os
from functools import wraps
from datetime import datetime


app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indlc3JqdXhtYnVkaXZnZ2l0YXdsIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTg0MDc5NiwiZXhwIjoyMDcxNDE2Nzk2fQ.2RwC0QEv6MCw5g9VQcJbNBawsXniXcIC0ALXD8i1TcI')


# Supabase configuration
SUPABASE_URL = os.environ.get('SUPABASE_URL', 'https://wesrjuxmbudivggitawl.supabase.co')
SUPABASE_JWT_SECRET = os.environ.get('SUPABASE_JWT_SECRET', '/1l7yuaS34mIaYd7Qa0863vr2uHzT559zGDIYSX/mIAjop+t2PhbfEOYq6IORyxS3T03W+WbVsmJ1cZElPFaKA==')
SUPABASE_ANON_KEY = os.environ.get('SUPABASE_ANON_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indlc3JqdXhtYnVkaXZnZ2l0YXdsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQ5MzU3NDEsImV4cCI6MjA1MDUxMTc0MX0.Fg4vKmVetNX9DDRJHR6QPF1TF3Yb7tMqmwGYhj8tV-s')


# Make config available to templates
@app.context_processor
def inject_config():
Â  Â  return {
Â  Â  Â  Â  'config': {
Â  Â  Â  Â  Â  Â  'SUPABASE_URL': SUPABASE_URL,
Â  Â  Â  Â  Â  Â  'SUPABASE_ANON_KEY': SUPABASE_ANON_KEY
Â  Â  Â  Â  }
Â  Â  }


def verify_supabase_token(token):
Â  Â  """Verify Supabase JWT token"""
Â  Â  try:
Â  Â  Â  Â  payload = jwt.decode(
Â  Â  Â  Â  Â  Â  token, 
Â  Â  Â  Â  Â  Â  SUPABASE_JWT_SECRET, 
Â  Â  Â  Â  Â  Â  algorithms=['HS256'],
Â  Â  Â  Â  Â  Â  audience='authenticated'
Â  Â  Â  Â  )
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  Â  'status': 'success',
Â  Â  Â  Â  Â  Â  'user': {
Â  Â  Â  Â  Â  Â  Â  Â  'id': payload.get('sub'),
Â  Â  Â  Â  Â  Â  Â  Â  'email': payload.get('email'),
Â  Â  Â  Â  Â  Â  Â  Â  'user_metadata': payload.get('user_metadata', {}),
Â  Â  Â  Â  Â  Â  Â  Â  'aud': payload.get('aud'),
Â  Â  Â  Â  Â  Â  Â  Â  'role': payload.get('role')
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  except jwt.ExpiredSignatureError:
Â  Â  Â  Â  return {'status': 'error', 'message': 'Token expired'}
Â  Â  except jwt.InvalidTokenError:
Â  Â  Â  Â  return {'status': 'error', 'message': 'Invalid token'}


def require_auth(f):
Â  Â  """Decorator to require authentication for protected routes"""
Â  Â  @wraps(f)
Â  Â  def decorated_function(*args, **kwargs):
Â  Â  Â  Â  # Check if user is logged in
Â  Â  Â  Â  if not session.get('user'):
Â  Â  Â  Â  Â  Â  return redirect(url_for('login'))
Â  Â  Â  Â  return f(*args, **kwargs)
Â  Â  return decorated_function


# ==================== MAIN ROUTES ====================


@app.route('/')
def index():
Â  Â  """Landing page with Sign In and Sign Up buttons"""
Â  Â  # If user is already logged in, redirect to user select
Â  Â  if session.get('user'):
Â  Â  Â  Â  return redirect(url_for('user_select'))
Â  Â  return render_template('index.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
Â  Â  """Login page and handler"""
Â  Â  if request.method == 'GET':
Â  Â  Â  Â  # If already logged in, redirect to user select
Â  Â  Â  Â  if session.get('user'):
Â  Â  Â  Â  Â  Â  return redirect(url_for('user_select'))
Â  Â  Â  Â  return render_template('login.html')
Â  Â  
Â  Â  # Handle POST request (form submission)
Â  Â  if request.method == 'POST':
Â  Â  Â  Â  try:
Â  Â  Â  Â  Â  Â  data = request.get_json()
Â  Â  Â  Â  Â  Â  token = data.get('token')
Â  Â  Â  Â  Â  Â  user_data = data.get('user')
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  if token and user_data:
Â  Â  Â  Â  Â  Â  Â  Â  # Store user info in session
Â  Â  Â  Â  Â  Â  Â  Â  session['access_token'] = token
Â  Â  Â  Â  Â  Â  Â  Â  session['user'] = user_data
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  return jsonify({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'status': 'success',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'message': 'Login successful',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'redirect_url': url_for('user_select')
Â  Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  Â  Â  return jsonify({'status': 'error', 'message': 'Invalid login data'}), 400
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  except Exception as e:
Â  Â  Â  Â  Â  Â  return jsonify({'status': 'error', 'message': str(e)}), 500


@app.route('/signup', methods=['GET', 'POST'])
def signup():
Â  Â  """Signup page and handler"""
Â  Â  if request.method == 'GET':
Â  Â  Â  Â  # If already logged in, redirect to user select
Â  Â  Â  Â  if session.get('user'):
Â  Â  Â  Â  Â  Â  return redirect(url_for('user_select'))
Â  Â  Â  Â  return render_template('signup.html')
Â  Â  
Â  Â  # Handle POST request (form submission)
Â  Â  if request.method == 'POST':
Â  Â  Â  Â  try:
Â  Â  Â  Â  Â  Â  data = request.get_json()
Â  Â  Â  Â  Â  Â  token = data.get('token')
Â  Â  Â  Â  Â  Â  user_data = data.get('user')
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  if token and user_data:
Â  Â  Â  Â  Â  Â  Â  Â  # Store user info in session
Â  Â  Â  Â  Â  Â  Â  Â  session['access_token'] = token
Â  Â  Â  Â  Â  Â  Â  Â  session['user'] = user_data
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  return jsonify({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'status': 'success',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'message': 'Registration successful',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'redirect_url': url_for('user_select')
Â  Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  Â  Â  return jsonify({'status': 'error', 'message': 'Invalid registration data'}), 400
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  except Exception as e:
Â  Â  Â  Â  Â  Â  return jsonify({'status': 'error', 'message': str(e)}), 500


@app.route('/forgot-password', methods=['GET', 'POST'])
def forgot_password():
Â  Â  """Forgot password page and handler"""
Â  Â  if request.method == 'GET':
Â  Â  Â  Â  # If already logged in, redirect to user select
Â  Â  Â  Â  if session.get('user'):
Â  Â  Â  Â  Â  Â  return redirect(url_for('user_select'))
Â  Â  Â  Â  return render_template('forgot-password.html')
Â  Â  
Â  Â  # Handle POST request (reset email sending)
Â  Â  if request.method == 'POST':
Â  Â  Â  Â  try:
Â  Â  Â  Â  Â  Â  data = request.get_json()
Â  Â  Â  Â  Â  Â  email = data.get('email')
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  if not email:
Â  Â  Â  Â  Â  Â  Â  Â  return jsonify({'status': 'error', 'message': 'Email is required'}), 400
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  # Here you would typically integrate with your email service
Â  Â  Â  Â  Â  Â  # For now, we'll just return success (Supabase handles this on the frontend)
Â  Â  Â  Â  Â  Â  return jsonify({
Â  Â  Â  Â  Â  Â  Â  Â  'status': 'success',
Â  Â  Â  Â  Â  Â  Â  Â  'message': 'Password reset link sent successfully'
Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  except Exception as e:
Â  Â  Â  Â  Â  Â  return jsonify({'status': 'error', 'message': str(e)}), 500


@app.route('/user-select', methods=['GET', 'POST'])
@require_auth
def user_select():
Â  Â  """User role selection page"""
Â  Â  if request.method == 'GET':
Â  Â  Â  Â  # Check if user already has a role
Â  Â  Â  Â  if session.get('user_role'):
Â  Â  Â  Â  Â  Â  if session['user_role'] == 'buyer':
Â  Â  Â  Â  Â  Â  Â  Â  return redirect(url_for('buyer_feed'))
Â  Â  Â  Â  Â  Â  elif session['user_role'] == 'seller':
Â  Â  Â  Â  Â  Â  Â  Â  return redirect(url_for('seller_feed'))
Â  Â  Â  Â  
Â  Â  Â  Â  return render_template('user-select.html')
Â  Â  
Â  Â  # Handle POST request (role selection)
Â  Â  if request.method == 'POST':
Â  Â  Â  Â  try:
Â  Â  Â  Â  Â  Â  data = request.get_json()
Â  Â  Â  Â  Â  Â  role = data.get('role')
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  if role in ['buyer', 'seller']:
Â  Â  Â  Â  Â  Â  Â  Â  # Store role in session
Â  Â  Â  Â  Â  Â  Â  Â  session['user_role'] = role
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  # Redirect based on role
Â  Â  Â  Â  Â  Â  Â  Â  if role == 'buyer':
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  redirect_url = url_for('buyer_feed')
Â  Â  Â  Â  Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  redirect_url = url_for('seller_feed')
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  return jsonify({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'status': 'success',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'message': f'Role set as {role}',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'redirect_url': redirect_url
Â  Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  Â  Â  return jsonify({'status': 'error', 'message': 'Invalid role'}), 400
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  except Exception as e:
Â  Â  Â  Â  Â  Â  return jsonify({'status': 'error', 'message': str(e)}), 500


@app.route('/buyer-feed')
@require_auth
def buyer_feed():
Â  Â  """Buyer feed page"""
Â  Â  # Ensure user is a buyer
Â  Â  if session.get('user_role') != 'buyer':
Â  Â  Â  Â  return redirect(url_for('user_select'))
Â  Â  return render_template('buyer-feed.html')


@app.route('/seller-feed') Â 
@require_auth
def seller_feed():
Â  Â  """Seller feed page"""
Â  Â  # Ensure user is a seller
Â  Â  if session.get('user_role') != 'seller':
Â  Â  Â  Â  return redirect(url_for('user_select'))
Â  Â  return render_template('seller-feed.html')


# ==================== ADDITIONAL ROUTES ====================


@app.route('/post-upload')
@require_auth
def post_upload():
Â  Â  """Post upload page for sellers only"""
Â  Â  if session.get('user_role') != 'seller':
Â  Â  Â  Â  return redirect(url_for('user_select'))
Â  Â  return render_template('post-upload.html')


@app.route('/equipment')
def equipment():
Â  Â  """Equipment page"""
Â  Â  return render_template('equipment.html')


@app.route('/about')
def about():
Â  Â  """About page"""
Â  Â  return render_template('about.html')


@app.route('/contact')
def contact():
Â  Â  """Contact page"""
Â  Â  return render_template('contact.html')


@app.route('/logout')
def logout():
Â  Â  """Logout route"""
Â  Â  session.clear()
Â  Â  flash('You have been logged out successfully.', 'info')
Â  Â  return redirect(url_for('index'))


# ==================== API ROUTES ====================


@app.route('/api/check-auth', methods=['POST'])
def check_auth():
Â  Â  """Check if user is authenticated"""
Â  Â  if session.get('user'):
Â  Â  Â  Â  return jsonify({
Â  Â  Â  Â  Â  Â  'status': 'success',
Â  Â  Â  Â  Â  Â  'authenticated': True,
Â  Â  Â  Â  Â  Â  'user': session['user'],
Â  Â  Â  Â  Â  Â  'role': session.get('user_role')
Â  Â  Â  Â  })
Â  Â  else:
Â  Â  Â  Â  return jsonify({
Â  Â  Â  Â  Â  Â  'status': 'error',
Â  Â  Â  Â  Â  Â  'authenticated': False
Â  Â  Â  Â  })


@app.route('/api/newsletter-signup', methods=['POST'])
def newsletter_signup():
Â  Â  """Newsletter signup endpoint"""
Â  Â  try:
Â  Â  Â  Â  data = request.get_json()
Â  Â  Â  Â  email = data.get('email')
Â  Â  Â  Â  
Â  Â  Â  Â  if not email:
Â  Â  Â  Â  Â  Â  return jsonify({'status': 'error', 'message': 'Email is required'}), 400
Â  Â  Â  Â  
Â  Â  Â  Â  # Here you would typically save to database
Â  Â  Â  Â  return jsonify({'status': 'success', 'message': 'Subscribed successfully'})
Â  Â  except Exception as e:
Â  Â  Â  Â  return jsonify({'status': 'error', 'message': str(e)}), 500


# ==================== ERROR HANDLERS ====================


@app.errorhandler(404)
def not_found(error):
Â  Â  """Handle 404 errors"""
Â  Â  return render_template('404.html'), 404


@app.errorhandler(500)
def internal_error(error):
Â  Â  """Handle 500 errors"""
Â  Â  return render_template('500.html'), 500


if __name__ == '__main__':
Â  Â  app.run(debug=True)
This is my app.py
For your clarification i do not have any .env file and i do not want to keep it also i want it directly without .env file

// Crop Post Management System
class CropPostManager {
    constructor() {
        this.storageKey = 'cropPosts';
        this.loadAndDisplayPosts();
    }

    // Get all posts from localStorage
    getPosts() {
        const posts = localStorage.getItem(this.storageKey);
        return posts ? JSON.parse(posts) : [];
    }

    // Save posts to localStorage
    savePosts(posts) {
        localStorage.setItem(this.storageKey, JSON.stringify(posts));
    }

    // Add a new post
    addPost(postData) {
        const posts = this.getPosts();
        const newPost = {
            id: Date.now(), // Simple ID generation
            userId: 'currentUser', // In a real app, this would be the actual user ID
            ...postData,
            timestamp: new Date().toISOString()
        };
        posts.unshift(newPost); // Add to beginning of array
        this.savePosts(posts);
        return newPost;
    }

    // Load and display posts on the feed page
    loadAndDisplayPosts() {
        const feedContainer = document.querySelector('.feed-container');
        if (!feedContainer) return;

        const posts = this.getPosts();
        feedContainer.innerHTML = ''; // Clear existing content

        if (posts.length === 0) {
            // Show empty state message
            feedContainer.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">🌾</div>
                    <h3>No crops available yet</h3>
                    <p>Be the first to post your crops! Click on "Post Upload" in the sidebar to get started.</p>
                    <a href="post-upload.html" class="upload-link">Upload Your First Crop</a>
                </div>
            `;
            return;
        }

        posts.forEach(post => {
            const postCard = this.createPostCard(post);
            feedContainer.appendChild(postCard);
        });

        // Add event listeners to buttons
        this.addButtonEventListeners();
    }

    // Create a post card element
    createPostCard(post) {
        const card = document.createElement('div');
        card.className = 'crop-card';
        card.dataset.postId = post.id;

        // Calculate time since posting
        const postTime = new Date(post.timestamp);
        const now = new Date();
        const timeDiff = now - postTime;
        const hoursAgo = Math.floor(timeDiff / (1000 * 60 * 60));
        const timeText = hoursAgo === 0 ? 'Just posted' : `Posted ${hoursAgo} hour${hoursAgo > 1 ? 's' : ''} ago`;

        card.innerHTML = `
            <div class="crop-card-header">
                <img src="images/profile.jpg" alt="Seller">
                <div class="user-info">
                    <span class="name">You</span>
                    <span class="time">${timeText}</span>
                </div>
            </div>
            <div class="crop-description">
                ${post.description}
            </div>
            <img src="${post.image}" class="crop-image" alt="${post.title}">
            <div class="crop-tags">
                <span class="crop-tag">${post.title}</span>
                <span class="crop-tag">${post.category}</span>
                <span class="crop-tag">${post.location}</span>
            </div>
            <div class="crop-details-row">
                <span class="detail"><span class="icon">₹</span>${post.price.replace('₹', '').replace('/kg', '')}/kg</span>
                <span class="detail"><span class="icon">📦</span>Available: ${post.available}</span>
                <span class="detail"><span class="icon">🚚</span>Delivery Available</span>
                <span class="detail"><span class="icon">📞</span>Contact Seller</span>
            </div>
            <div class="crop-actions-row">
                <span class="action">0 Likes</span>
                <span class="action">0 Comments</span>
            </div>
            <div class="crop-card-footer">
                <span class="share-link">Share</span>
            </div>
            <div class="contact-seller-section">
                <button class="btn-contact" onclick="cropManager.contactSeller(${post.id})">
                    <span class="icon">📞</span>
                    Contact Seller
                </button>
            </div>
        `;

        return card;
    }

    // Add event listeners to buttons
    addButtonEventListeners() {
        // Event listeners are added via onclick attributes in createPostCard
    }

    // Contact seller functionality
    contactSeller(postId) {
        const posts = this.getPosts();
        const post = posts.find(p => p.id === postId);
        if (post) {
            alert(`Contacting seller for: ${post.title}\nLocation: ${post.location}\nPrice: ${post.price}`);
            // Here you can implement actual contact functionality
            // Like opening a chat, sending email, etc.
        }
    }

    // Contact functionality
    contact(postId) {
        const posts = this.getPosts();
        const post = posts.find(p => p.id === postId);
        if (post) {
            alert(`General contact for: ${post.title}\nThis could open a contact form or redirect to contact page.`);
            // Here you can implement general contact functionality
        }
    }

    // Refresh the feed (useful for when new posts are added)
    refreshFeed() {
        this.loadAndDisplayPosts();
    }
}

// Initialize the crop manager when the page loads
let cropManager;
document.addEventListener('DOMContentLoaded', function() {
    cropManager = new CropPostManager();
    
    // Add refresh functionality (useful for testing)
    window.refreshCropFeed = function() {
        cropManager.refreshFeed();
    };
});

// Function to add a new post (can be called from other pages)
function addNewCropPost(postData) {
    if (cropManager) {
        cropManager.addPost(postData);
        cropManager.refreshFeed();
    }
}

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { CropPostManager, addNewCropPost };
}

  This is my script.jsPlease make all the necessary changes required nd give me complete cosdes of each section Pleasemake sure not to touch the .css part